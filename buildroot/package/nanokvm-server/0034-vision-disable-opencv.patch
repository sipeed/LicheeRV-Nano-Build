From c949fff8470f23ed87a7dea9c7a3a98e549ddedd Mon Sep 17 00:00:00 2001
From: scpcom <scpcom@gmx.de>
Date: Wed, 19 Feb 2025 23:30:54 +0100
Subject: [PATCH] vision: disable opencv

---
 support/sg2002/additional/vision/CMakeLists.txt       |  4 +++-
 .../components/vision/include/maix_camera.hpp |  2 ++
 support/sg2002/additional/vision/src/maix_camera.cpp  |  4 ++++
 support/sg2002/additional/vision/src/maix_image.cpp   | 20 +++++++++++++++++++
 .../components/vision/src/maix_image_ops.cpp  |  2 ++
 5 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/support/sg2002/additional/vision/CMakeLists.txt b/support/sg2002/additional/vision/CMakeLists.txt
index c683409..13edc3a 100644
--- a/support/sg2002/additional/vision/CMakeLists.txt
+++ b/support/sg2002/additional/vision/CMakeLists.txt
@@ -33,7 +33,8 @@ endif()
 
 
 ###### Add required/dependent components ######
-list(APPEND ADD_REQUIREMENTS basic opencv opencv_freetype websocket peripheral)
+#list(APPEND ADD_REQUIREMENTS basic opencv opencv_freetype websocket peripheral)
+list(APPEND ADD_REQUIREMENTS basic websocket peripheral)
 list(APPEND ADD_REQUIREMENTS omv)
 list(APPEND ADD_REQUIREMENTS kvm_mmf)
 ###############################################
@@ -65,6 +66,7 @@ list(APPEND ADD_REQUIREMENTS kvm_mmf)
 #### and components denpend on this component
 # list(APPEND ADD_DEFINITIONS -DAAAAA222=1
 #                             -DAAAAA333=1)
+list(APPEND ADD_DEFINITIONS -fopenmp)
 ###############################################
 
 ############ Add static libs ##################
diff --git a/support/sg2002/additional/vision/include/maix_camera.hpp b/support/sg2002/additional/vision/include/maix_camera.hpp
index ef15de3..08a6cc9 100644
--- a/support/sg2002/additional/vision/include/maix_camera.hpp
+++ b/support/sg2002/additional/vision/include/maix_camera.hpp
@@ -16,7 +16,9 @@
 #include <map>
 #include <stdexcept>
 #include <vector>
+#ifdef HAVE_OPENCV
 #include <opencv2/opencv.hpp>
+#endif
 
 /**
  * @brief maix.camera module, access camera device and get image from it
diff --git a/support/sg2002/additional/vision/src/maix_camera.cpp b/support/sg2002/additional/vision/src/maix_camera.cpp
index 8dab65c..3116164 100644
--- a/support/sg2002/additional/vision/src/maix_camera.cpp
+++ b/support/sg2002/additional/vision/src/maix_camera.cpp
@@ -64,6 +64,7 @@ namespace maix::camera
         return err::ERR_NONE;
     }
 
+#ifdef HAVE_OPENCV
     static void generate_colorbar(image::Image &img)
     {
         int width = img.width();
@@ -88,6 +89,7 @@ namespace maix::camera
             color += color_step;
         }
     }
+#endif
 #ifdef PLATFORM_LINUX
     static char * _get_device(const char *device)
     {
@@ -343,7 +345,9 @@ namespace maix::camera
 
         if (_show_colorbar) {
             image::Image *img = new image::Image(_width, _height);
+#ifdef HAVE_OPENCV
             generate_colorbar(*img);
+#endif
             err::check_null_raise(img, "camera read failed");
             return img;
         } else {
diff --git a/support/sg2002/additional/vision/src/maix_image.cpp b/support/sg2002/additional/vision/src/maix_image.cpp
index 9405b4a..286ea2e 100644
--- a/support/sg2002/additional/vision/src/maix_image.cpp
+++ b/support/sg2002/additional/vision/src/maix_image.cpp
@@ -6,8 +6,10 @@
  */
 
 #include "maix_image.hpp"
+#ifdef HAVE_OPENCV
 #include "opencv2/opencv.hpp"
 #include "opencv2/freetype.hpp"
+#endif
 #include <map>
 #include <valarray>
 #include <vector>
@@ -20,7 +22,9 @@
 namespace maix::image
 {
 
+#ifdef HAVE_OPENCV
     static void _get_cv_format_color(image::Format _format, const image::Color &color_in, int *ch_format, cv::Scalar &cv_color);
+#endif
 
     static uint8_t _get_char_size(const uint8_t c)
     {
@@ -43,6 +47,7 @@ namespace maix::image
     }
 
 
+#ifdef HAVE_OPENCV
     image::Image *load(const char *path, image::Format format)
     {
         cv::Mat mat;
@@ -138,6 +143,7 @@ namespace maix::image
         memcpy(img->data(), mat.data, mat.cols * mat.rows * mat.channels());
         return img;
     }
+#endif
 
     image::Image *from_bytes(int width, int height, image::Format format, Bytes *data, bool copy)
     {
@@ -145,6 +151,7 @@ namespace maix::image
         return new image::Image(width, height, format, data->data, data->size(), copy);
     }
 
+#ifdef HAVE_OPENCV
     static std::map<std::string, cv::Ptr<cv::freetype::FreeType2>> fonts_info;
     static std::map<std::string, int> fonts_size_info;
     static std::string curr_font_name = "hershey_plain";
@@ -273,6 +280,7 @@ namespace maix::image
             cv::putText(img, text, point_tmp, font_id, scale, color, thickness > 0 ? thickness : -thickness, cv::LINE_AA, false);
         }
     }
+#endif
 
     void Image::_create_image(int width, int height, image::Format format, uint8_t *data, int data_size, bool copy)
     {
@@ -414,8 +422,10 @@ namespace maix::image
             throw err::Exception(err::ERR_ARGS, "convert format failed, already the format");
         }
 
+#ifdef HAVE_OPENCV
         cv::Mat src(_height, _width, CV_8UC((int)image::fmt_size[_format]), _data);
         cv::ColorConversionCodes cvt_code;
+#endif
         if(format == image::FMT_JPEG) // compress
         {
             switch (_format) {
@@ -518,6 +528,7 @@ namespace maix::image
             }
 
         }
+#ifdef HAVE_OPENCV
         else if(format == image::FMT_PNG)
         {
             image::Image *p_img = nullptr;
@@ -722,6 +733,9 @@ namespace maix::image
         }
 
         return img;
+#else
+        return nullptr;
+#endif
     }
 
 
@@ -733,7 +747,9 @@ namespace maix::image
     image::Image *Image::to_jpeg(int quality)
     {
         image::Format format = image::Format::FMT_JPEG;
+#ifdef HAVE_OPENCV
         cv::Mat src(_height, _width, CV_8UC((int)image::fmt_size[_format]), _data);
+#endif
         switch (_format) {
         case image::FMT_YVU420SP:
             {
@@ -811,6 +827,7 @@ namespace maix::image
         return nullptr;
     }
 
+#ifdef HAVE_OPENCV
     image::Image *Image::draw_image(int x, int y, image::Image &img)
     {
         image::Format fmt = img.format();
@@ -1301,6 +1318,7 @@ namespace maix::image
         cv::warpAffine(img, dst, warp_mat, dst.size(), (cv::InterpolationFlags)method);
         return ret;
     }
+#endif
 
     image::Image *Image::copy()
     {
@@ -1310,6 +1328,7 @@ namespace maix::image
         return ret;
     }
 
+#ifdef HAVE_OPENCV
     image::Image *Image::crop(int x, int y, int w, int h)
     {
         image::Image *ret = new image::Image(w, h, _format);
@@ -1651,4 +1670,5 @@ namespace maix::image
         int h = std::min(roi[1] + roi[3], src_y + src_h) - y;
         return std::vector<int>{x, y, w, h};
     }
+#endif
 } // namespace maix::image
diff --git a/support/sg2002/additional/vision/src/maix_image_ops.cpp b/support/sg2002/additional/vision/src/maix_image_ops.cpp
index dd3eb17..c1e4c7e 100644
--- a/support/sg2002/additional/vision/src/maix_image_ops.cpp
+++ b/support/sg2002/additional/vision/src/maix_image_ops.cpp
@@ -9,7 +9,9 @@
 #include "maix_image_util.hpp"
 #include "maix_err.hpp"
 #include <omv.hpp>
+#ifdef HAVE_OPENCV
 #include <opencv2/opencv.hpp>
+#endif
 
 namespace maix::image {
     void convert_to_imlib_image(image::Image *image, image_t *imlib_image) {
-- 
2.34.1

